version: "2.4"

services:
  fileflows:
    image: revenz/fileflows
    container_name: fileflows
    env_file: .env
    environment:
      - TZ=${TZ}
    volumes:
      - /opt/fileflows:/app/Data
      - /var/log/FileFlow:/app/Logs
      - /mnt/naslib/plex/library:/media  #optional
      - /mnt/naslib/plex/nzbget/downloads:/nzbget
    ports:
      - 5000:5000
    restart: unless-stopped
  pihole:
    container_name: pihole
    image: pihole/pihole:latest
    env_file: .env
    ports:
      - "53:53/tcp"
      - "53:53/udp"
      - "8080:80/tcp"
    environment:
      TZ: 'America/New_York'
      WEBPASSWORD:
      WEBPASSWORD_FILE: '/mnt/piholeopt:/secrets/admin_pw.txt'
      DNSMASQ_USER:  'root'
    volumes:
      - "/mnt/piholeopt/etc-pihole/:/etc/pihole/"
      - "/mnt/piholeopt/etc-dnsmasq.d/:/etc/dnsmasq.d/"
    restart: unless-stopped
#  lancache:
#    image: lancachenet/monolithic:latest
#    container_name: lancache
#    env_file: .env
#    restart: unless-stopped
#    ports:
#      - 8080:80/tcp
#      - 8443:443/tcp
#    volumes:
#      - ${CACHE_ROOT}/cache:/data/cache
#      - ${CACHE_ROOT}/logs:/data/logs
  watchtower:
    image: containrrr/watchtower
    container_name: watchtower
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
  tautulli:
    image: ghcr.io/tautulli/tautulli
    container_name: tautulli
    restart: unless-stopped
    env_file: .env
    volumes:
      - /opt/Tautulli:/config
      - /home/plex:/home
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    ports:
      - "8181:8181"
  ombi:
    image: lscr.io/linuxserver/ombi
    container_name: ombi
    env_file: .env
    environment:
      - PUID=${PUID}
      - GUID=${PGID}
      - TZ=${TZ}
      - BASE_URL=/ombi
    volumes:
      - /opt/Ombi:/config
    ports:
      - "3579:3579"
    restart:  unless-stopped
  nginx:
    image: nginx:latest
    container_name: nginx_container
    ports:
      - "80:80/tcp"
      - "443:443/tcp"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./certbot/www/:/var/www/certbot/:ro
      - ./certbot/conf:/etc/letsencrypt/:ro
    restart:  unless-stopped
  certbot_www:
    container_name: certbot_www
    image: certbot/certbot
    volumes: 
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot:rw
    command: certonly --webroot -w /var/www/certbot --force-renewal --email trekkie@nomorestars.com -d www.nomorestars.com --agree-tos
  homeassistant:
    container_name: homeassistant
    image: "ghcr.io/home-assistant/home-assistant:stable"
    volumes:
      - /mnt/piholeopt/config-homeassistant:/config
      - /etc/localtime:/etc/localtime:ro
    restart: unless-stopped
    privileged: true
    network_mode: host
  db:
    restart: always
    image: postgres:14-alpine
    shm_size: 256mb
    networks:
      - internal_network
    healthcheck:
      test: ['CMD', 'pg_isready', '-U', 'postgres']
    volumes:
      - ./postgres14:/var/lib/postgresql/data
    environment:
      - 'POSTGRES_HOST_AUTH_METHOD=trust'
  redis:
    restart: always
    image: redis:7-alpine
    networks:
      - internal_network
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
    volumes:
      - ./redis:/data
  web:
    build: .
    image: tootsuite/mastodon
    restart: always
    env_file: .env.production
    command: bash -c "rm -f /mastodon/tmp/pids/server.pid; bundle exec rails s -p 3000"
    networks:
      - external_network
      - internal_network
    healthcheck:
      # prettier-ignore
      test: ['CMD-SHELL', 'wget -q --spider --proxy=off localhost:3000/health || exit 1']
    ports:
      - '127.0.0.1:3000:3000'
    depends_on:
      - db
      - redis
    # - es
    volumes:
    - ./public/system:/mastodon/public/system
    
  streaming:
    build: .
    image: tootsuite/mastodon
    restart: always
    env_file: .env.production
    command: node ./streaming
    networks:
      - external_network
      - internal_network
    healthcheck:
      # prettier-ignore
      test: ['CMD-SHELL', 'wget -q --spider --proxy=off localhost:4000/api/v1/streaming/health || exit 1']
    ports:
      - '127.0.0.1:4000:4000'
    depends_on:
      - db
      - redis
  sidekiq:
    build: .
    image: tootsuite/mastodon
    restart: always
    env_file: .env.production
    command: bundle exec sidekiq
    depends_on:
      - db
      - redis
    networks:
      - external_network
      - internal_network
    volumes:
      - ./public/system:/mastodon/public/system
    healthcheck:
      test: ['CMD-SHELL', "ps aux | grep '[s]idekiq\ 6' || false"]
  networks:
    external_network:
    internal_network:
      internal: true